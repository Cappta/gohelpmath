package gohelpmath

import (
	"testing"

	"github.com/Cappta/Cappta.Common.Go/Fixture"
	. "github.com/smartystreets/goconvey/convey"
)

func TestHash(t *testing.T) {
	Convey("Given 256 bytes", t, func() {
		bytes := Fixture.Bytes(256)
		Convey("When hashing to 1 bytes", func() {
			hash := Hash(bytes, 1)
			Convey("Then should resemble expected output", func() {
				expectedOutput := []uint8{15}
				So(hash, ShouldResemble, expectedOutput)
			})
		})
		Convey("When hashing to 2 bytes", func() {
			hash := Hash(bytes, 2)
			Convey("Then should resemble expected output", func() {
				expectedOutput := []uint8{153, 47}
				So(hash, ShouldResemble, expectedOutput)
			})
		})
		Convey("When hashing to 4 bytes", func() {
			hash := Hash(bytes, 4)
			Convey("Then should resemble expected output", func() {
				expectedOutput := []uint8{197, 239, 22, 77}
				So(hash, ShouldResemble, expectedOutput)
			})
		})
		Convey("When hashing to 8 bytes", func() {
			hash := Hash(bytes, 8)
			Convey("Then should resemble expected output", func() {
				expectedOutput := []uint8{173, 174, 228, 116, 205, 68, 187, 214}
				So(hash, ShouldResemble, expectedOutput)
			})
		})
		Convey("When hashing to 16 bytes", func() {
			hash := Hash(bytes, 16)
			Convey("Then should resemble expected output", func() {
				expectedOutput := []uint8{37, 132, 181, 32, 111, 205, 175, 107, 8, 37, 141, 33, 173, 91, 151, 238}
				So(hash, ShouldResemble, expectedOutput)
			})
		})
		Convey("When hashing to 32 bytes", func() {
			hash := Hash(bytes, 32)
			Convey("Then should resemble expected output", func() {
				expectedOutput := []uint8{219, 117, 0, 26, 6, 42, 190, 12, 212, 152, 82, 155, 213, 122, 194, 181, 197, 30, 110, 124, 57, 62, 56, 130, 40, 177, 246, 79, 210, 127, 63, 30}
				So(hash, ShouldResemble, expectedOutput)
			})
		})
		Convey("When hashing to 64 bytes", func() {
			hash := Hash(bytes, 64)
			Convey("Then should resemble expected output", func() {
				expectedOutput := []uint8{78, 234, 4, 189, 247, 252, 27, 208, 10, 109, 179, 246, 13, 156, 68, 67, 224, 203, 119, 30, 104, 97, 23, 170, 46, 249, 114, 196, 200, 2, 40, 21, 165, 182, 174, 55, 131, 126, 29, 208, 3, 211, 219, 193, 71, 110, 84, 208, 73, 0, 240, 35, 249, 64, 41, 2, 219, 111, 137, 6, 188, 83, 207, 108}
				So(hash, ShouldResemble, expectedOutput)
			})
		})
		Convey("When hashing to 128 bytes", func() {
			hash := Hash(bytes, 128)
			Convey("Then should resemble expected output", func() {
				expectedOutput := []uint8{255, 223, 136, 92, 147, 74, 130, 32, 219, 145, 164, 189, 102, 76, 136, 59, 98, 176, 40, 59, 54, 27, 102, 146, 43, 98, 74, 50, 190, 94, 172, 91, 229, 96, 96, 84, 32, 38, 13, 126, 243, 95, 165, 31, 171, 29, 174, 162, 201, 249, 97, 236, 133, 104, 164, 159, 62, 23, 143, 42, 58, 234, 19, 72, 89, 87, 57, 209, 115, 184, 18, 148, 207, 136, 54, 180, 127, 39, 101, 198, 208, 30, 90, 45, 197, 232, 240, 144, 9, 110, 58, 2, 20, 66, 109, 18, 41, 247, 59, 95, 79, 170, 40, 253, 250, 132, 90, 193, 150, 223, 176, 135, 215, 58, 14, 126, 168, 88, 246, 76, 100, 220, 147, 4, 145, 188, 133, 160}
				So(hash, ShouldResemble, expectedOutput)
			})
		})
		Convey("When hashing to 256 bytes", func() {
			hash := Hash(bytes, 256)
			Convey("Then should resemble expected output", func() {
				expectedOutput := []uint8{67, 158, 211, 77, 34, 244, 160, 182, 58, 130, 28, 119, 10, 233, 242, 176, 117, 127, 254, 34, 212, 228, 143, 84, 194, 247, 56, 170, 93, 174, 139, 17, 212, 249, 63, 148, 133, 14, 172, 147, 252, 215, 174, 211, 192, 182, 94, 237, 5, 249, 79, 45, 128, 32, 190, 113, 124, 2, 120, 207, 148, 204, 65, 22, 41, 126, 160, 237, 233, 247, 199, 167, 55, 165, 165, 64, 14, 117, 201, 31, 78, 114, 161, 131, 128, 223, 176, 185, 197, 85, 80, 246, 74, 241, 183, 255, 57, 183, 33, 107, 90, 101, 214, 110, 139, 240, 157, 46, 42, 186, 141, 98, 39, 237, 137, 181, 240, 124, 12, 196, 147, 107, 242, 95, 130, 182, 115, 229, 247, 58, 54, 50, 243, 214, 62, 191, 15, 156, 232, 181, 234, 238, 84, 224, 30, 224, 10, 98, 205, 147, 216, 110, 56, 137, 32, 209, 116, 192, 57, 15, 233, 41, 109, 161, 65, 97, 80, 143, 180, 118, 177, 96, 69, 193, 193, 163, 126, 72, 89, 155, 147, 143, 164, 134, 0, 207, 201, 134, 3, 145, 101, 183, 33, 13, 143, 232, 181, 234, 133, 98, 104, 37, 164, 93, 33, 159, 191, 141, 153, 183, 206, 113, 120, 156, 33, 126, 232, 0, 94, 44, 27, 190, 197, 237, 218, 169, 33, 78, 190, 208, 105, 235, 134, 212, 177, 140, 189, 132, 234, 254, 127, 64, 24, 136, 104, 134, 121, 48, 63, 242, 10, 10, 233, 10, 227, 84}
				So(hash, ShouldResemble, expectedOutput)
			})
		})
		Convey("When hashing to 512 bytes", func() {
			hash := Hash(bytes, 512)
			Convey("Then should resemble expected output", func() {
				expectedOutput := []uint8{70, 171, 29, 73, 183, 138, 89, 13, 185, 21, 255, 163, 198, 45, 195, 79, 113, 116, 234, 173, 20, 79, 218, 0, 137, 15, 140, 145, 120, 125, 10, 5, 195, 42, 96, 235, 120, 246, 160, 44, 64, 191, 10, 208, 90, 139, 200, 211, 2, 6, 201, 139, 127, 100, 209, 52, 137, 109, 91, 111, 195, 203, 97, 223, 132, 88, 59, 128, 33, 54, 220, 117, 32, 115, 131, 81, 191, 244, 162, 219, 177, 186, 49, 172, 108, 175, 124, 65, 235, 167, 183, 24, 102, 63, 78, 208, 162, 194, 59, 170, 19, 234, 149, 216, 34, 65, 47, 110, 208, 234, 155, 237, 153, 135, 233, 92, 231, 177, 137, 244, 161, 255, 84, 44, 129, 201, 69, 115, 92, 87, 125, 216, 165, 22, 188, 188, 228, 192, 131, 52, 146, 255, 139, 41, 157, 84, 126, 67, 251, 92, 220, 90, 52, 116, 149, 252, 83, 254, 188, 102, 29, 137, 42, 82, 14, 98, 12, 9, 166, 57, 139, 155, 199, 255, 222, 149, 44, 191, 184, 138, 40, 252, 47, 214, 40, 192, 210, 201, 56, 120, 19, 183, 249, 250, 156, 71, 153, 7, 95, 216, 59, 70, 0, 93, 214, 54, 59, 120, 147, 244, 231, 187, 118, 56, 181, 61, 235, 197, 110, 209, 131, 145, 105, 65, 232, 81, 120, 28, 70, 40, 211, 196, 125, 205, 177, 77, 77, 104, 51, 23, 50, 201, 202, 202, 8, 66, 42, 112, 219, 87, 48, 37, 53, 175, 179, 32, 84, 94, 129, 228, 193, 208, 235, 65, 172, 35, 224, 144, 83, 102, 247, 94, 231, 225, 158, 98, 81, 210, 122, 203, 61, 243, 9, 133, 122, 216, 167, 248, 91, 147, 36, 49, 200, 70, 43, 246, 58, 129, 80, 54, 70, 138, 100, 81, 254, 117, 104, 125, 202, 50, 55, 250, 151, 4, 7, 86, 72, 131, 240, 44, 112, 71, 107, 25, 245, 103, 50, 73, 69, 168, 31, 208, 63, 225, 245, 84, 39, 178, 122, 41, 102, 74, 223, 97, 220, 94, 96, 58, 78, 7, 183, 79, 122, 56, 207, 133, 38, 65, 238, 103, 164, 161, 247, 177, 71, 127, 118, 251, 153, 70, 200, 142, 127, 30, 84, 202, 224, 129, 98, 92, 6, 156, 131, 160, 60, 209, 72, 200, 113, 121, 212, 86, 101, 116, 26, 216, 94, 137, 73, 28, 11, 174, 211, 238, 43, 142, 131, 35, 132, 31, 89, 127, 201, 181, 191, 248, 10, 114, 121, 124, 110, 152, 248, 80, 63, 24, 133, 202, 183, 218, 101, 18, 242, 224, 208, 157, 207, 159, 221, 188, 89, 126, 88, 17, 3, 115, 62, 240, 205, 176, 66, 58, 238, 142, 88, 84, 152, 235, 186, 191, 73, 201, 253, 238, 119, 118, 103, 249, 127, 177, 203, 254, 155, 238, 22, 158, 11, 107, 57, 100, 100, 56, 221, 112, 119, 168, 20, 199, 14, 182, 161, 144, 168, 73, 243, 118, 122, 229, 106, 195, 207, 1, 116, 180, 51, 213, 145, 216, 34, 133, 189, 245}
				So(hash, ShouldResemble, expectedOutput)
			})
		})
		Convey("When hashing to 1024 bytes", func() {
			hash := Hash(bytes, 1024)
			Convey("Then should resemble expected output", func() {
				expectedOutput := []uint8{73, 196, 13, 116, 159, 81, 245, 246, 197, 67, 220, 14, 137, 230, 123, 194, 151, 236, 225, 1, 179, 222, 184, 16, 251, 76, 177, 80, 66, 188, 146, 112, 71, 61, 161, 34, 182, 218, 176, 223, 123, 75, 230, 98, 177, 193, 68, 192, 222, 63, 217, 89, 191, 137, 194, 235, 120, 162, 236, 9, 82, 174, 233, 69, 221, 187, 69, 171, 206, 218, 165, 181, 149, 21, 132, 34, 90, 85, 3, 242, 99, 188, 153, 66, 50, 135, 123, 129, 75, 164, 80, 75, 179, 38, 126, 166, 124, 247, 194, 156, 184, 240, 234, 209, 83, 140, 70, 103, 242, 228, 56, 90, 106, 19, 163, 98, 219, 117, 220, 207, 161, 30, 172, 172, 96, 172, 233, 16, 183, 128, 150, 51, 130, 10, 33, 100, 200, 180, 125, 141, 120, 166, 174, 216, 241, 49, 133, 29, 169, 205, 106, 160, 57, 200, 243, 220, 216, 36, 45, 216, 37, 114, 80, 80, 207, 14, 86, 178, 225, 75, 72, 23, 61, 229, 42, 190, 137, 43, 91, 68, 192, 82, 150, 194, 50, 127, 127, 235, 239, 226, 147, 100, 119, 125, 135, 41, 144, 212, 61, 126, 139, 82, 240, 26, 52, 38, 9, 50, 27, 65, 94, 37, 235, 1, 180, 155, 51, 53, 86, 198, 73, 93, 214, 172, 109, 200, 61, 123, 112, 106, 248, 167, 176, 15, 73, 81, 201, 236, 153, 240, 102, 228, 110, 236, 42, 142, 250, 4, 170, 114, 78, 74, 205, 197, 28, 23, 196, 24, 93, 246, 59, 253, 16, 133, 195, 215, 66, 130, 4, 14, 209, 57, 66, 19, 245, 76, 40, 8, 239, 108, 68, 112, 100, 117, 47, 17, 31, 43, 0, 227, 84, 215, 145, 122, 248, 54, 89, 93, 214, 102, 51, 4, 238, 215, 222, 244, 104, 132, 62, 149, 229, 26, 100, 206, 73, 125, 146, 191, 161, 78, 174, 28, 100, 70, 80, 62, 154, 221, 251, 224, 109, 163, 198, 214, 244, 171, 223, 111, 254, 40, 126, 163, 192, 104, 116, 41, 5, 66, 188, 253, 184, 68, 153, 173, 227, 178, 156, 46, 144, 86, 180, 227, 251, 50, 193, 47, 172, 159, 55, 104, 211, 80, 94, 228, 202, 0, 11, 233, 2, 25, 102, 36, 75, 239, 87, 53, 21, 86, 59, 200, 187, 148, 84, 6, 122, 38, 229, 50, 167, 202, 35, 27, 93, 57, 195, 235, 232, 227, 118, 163, 73, 40, 151, 205, 139, 98, 53, 157, 119, 249, 188, 187, 42, 161, 13, 172, 203, 141, 151, 111, 166, 197, 170, 22, 218, 74, 185, 142, 184, 122, 58, 155, 117, 205, 161, 181, 143, 61, 134, 99, 124, 30, 37, 35, 89, 82, 141, 213, 29, 211, 76, 19, 106, 0, 95, 214, 143, 243, 178, 158, 103, 126, 71, 207, 151, 236, 39, 1, 114, 89, 52, 93, 184, 236, 180, 116, 91, 165, 132, 228, 109, 143, 109, 28, 58, 51, 205, 35, 107, 246, 129, 144, 247, 105, 112, 218, 49, 103, 146, 156, 218, 50, 59, 211, 30, 127, 76, 44, 170, 200, 225, 196, 76, 193, 247, 54, 243, 191, 207, 179, 141, 109, 103, 81, 207, 93, 131, 66, 187, 171, 248, 192, 189, 242, 55, 9, 200, 234, 109, 168, 83, 254, 193, 173, 90, 139, 180, 24, 211, 234, 67, 174, 150, 206, 82, 244, 135, 127, 174, 197, 179, 165, 14, 168, 123, 74, 75, 106, 240, 104, 127, 193, 108, 82, 17, 156, 251, 124, 188, 77, 46, 254, 176, 188, 161, 245, 92, 169, 185, 2, 228, 57, 182, 121, 207, 178, 145, 99, 142, 158, 223, 134, 123, 105, 66, 151, 206, 78, 76, 99, 123, 92, 136, 120, 225, 43, 177, 224, 217, 69, 251, 92, 7, 153, 109, 45, 120, 201, 25, 35, 181, 123, 83, 136, 110, 46, 202, 120, 28, 88, 68, 231, 6, 89, 79, 83, 245, 6, 189, 113, 255, 79, 202, 247, 4, 190, 63, 23, 46, 83, 104, 47, 147, 28, 177, 93, 28, 231, 233, 212, 199, 123, 37, 254, 174, 0, 117, 32, 190, 153, 103, 65, 148, 132, 204, 143, 124, 160, 166, 145, 7, 40, 21, 127, 222, 195, 0, 171, 249, 13, 97, 48, 174, 91, 208, 20, 87, 38, 233, 222, 151, 75, 223, 195, 247, 90, 143, 239, 61, 112, 209, 58, 89, 82, 86, 123, 28, 179, 194, 156, 115, 251, 226, 203, 165, 90, 100, 11, 103, 221, 187, 239, 72, 178, 93, 101, 235, 14, 163, 7, 147, 30, 60, 167, 147, 251, 157, 123, 156, 31, 175, 12, 186, 88, 148, 145, 140, 155, 104, 81, 250, 143, 74, 134, 181, 225, 192, 78, 27, 191, 135, 151, 203, 156, 182, 81, 71, 175, 242, 152, 221, 55, 150, 165, 142, 102, 62, 139, 115, 86, 135, 127, 108, 254, 254, 219, 77, 200, 6, 219, 132, 98, 60, 123, 195, 94, 123, 85, 54, 2, 56, 239, 94, 2, 170, 57, 106, 234, 237, 241, 17, 215, 221, 41, 72, 211, 111, 166, 204, 181, 231, 1, 38, 140, 170, 88, 137, 109, 103, 14, 117, 147, 146, 254, 142, 252, 49, 164, 225, 27, 54, 83, 141, 224, 108, 21, 35, 247, 140, 19, 255, 41, 142, 11, 49, 139, 217, 234, 117, 142, 36, 68, 98, 68, 225, 221, 4, 92, 183, 23, 133, 145, 155, 175, 169, 254, 162, 221, 216, 62, 60, 238, 132, 3, 152, 238, 166, 15, 142, 136, 15, 96, 195, 28, 146, 57, 153, 244, 27, 223, 119, 248, 185, 203, 216, 134, 42, 165, 162, 153, 91, 174, 204, 196, 165, 212, 225, 91, 65, 87, 118, 71, 92, 124, 176, 23, 118, 171, 49, 59, 1, 233, 161, 11, 104, 66, 36, 27, 224, 107, 9, 194, 181, 49, 69, 151, 179, 29, 188, 69, 238, 213, 150, 255, 203, 254, 12, 221, 53, 33, 164, 19, 114, 88, 228, 221, 201, 252, 63, 147, 122, 212, 6, 30, 224, 230, 219, 146, 249, 65, 160, 153, 29, 165, 166, 54, 117, 246, 212, 254, 132, 113, 43, 126}
				So(hash, ShouldResemble, expectedOutput)
			})
		})
	})
}
